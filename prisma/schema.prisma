// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model Account {
    id                String    @id @default(auto()) @map("_id") @db.ObjectId
    userId            String    @db.ObjectId
    type              String  
    provider          String  
    providerAccountId String  
    refresh_token     String?   @db.String
    access_token      String?   @db.String
    expires_at        Int?  
    token_type        String?  
    scope             String?  
    id_token          String?   @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    email          String    @unique
    emailVerified  DateTime?
    hashedPassword String?

    role           String    @default("user")
    image          String?

    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    accounts       Account[]
    comments       Comment[]
    posts          Post[]
    likes          Likes[]

}

model Post {
    id              String     @id @default(auto()) @map("_id") @db.ObjectId
    imageUrl        String?

    createdAt       DateTime   @default(now())
    published       Boolean    @default(false)

    name            String
    description     String     @default("")
    content         String     @default("[]")

    visits          Int        @default(0)
    category            Category       @relation(fields: [categoryId], references: [id])
    categoryId          String    @db.ObjectId

    comments        Comment[]
    likes           Likes[]
    
    authorId        String     @db.ObjectId
    author          User       @relation(fields: [authorId], references: [id])


  @@unique([name, authorId])
}


model Comment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  message       String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  isModerated   Boolean @default(false)

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @db.ObjectId
    
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String     @db.ObjectId
  
}

model Category{
    id                String    @id @default(auto()) @map("_id") @db.ObjectId
    name              String?
    imageUrl          String

    posts Post[]

    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
}

model Likes{
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String    @db.ObjectId

  post              Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId            String     @db.ObjectId
  
}